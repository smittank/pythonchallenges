class MyTime:
    def __init__(self, hrs=0, mins=0, secs=0):
       
       totalsecs = hrs*3600 + mins*60 + secs
       self.hours = totalsecs // 3600       
       leftoversecs = totalsecs % 3600
       self.minutes = leftoversecs // 60
       self.seconds = leftoversecs % 60

    def __str__(self):
        return "({0}, {1}, {2})".format(self.hours,self.minutes,self.seconds)

    def to_seconds(self):
        return self.hours * 3600 + self.minutes * 60 + self.seconds

    def after(self, time2):
        return self.to_seconds() > time2.to_seconds()

    def __add__(self, other):
        return MyTime(0, 0, self.to_seconds() + other.to_seconds())

   
def add_time(t1, t2):
    secs = t1.to_seconds() + t2.to_seconds()
    return MyTime(0, 0, secs)


def increment(t, seconds):
    t.seconds+=seconds

    while t.seconds>=60:
        t.seconds-=60
        t.minutes+=1

    while t.minutes>=60:
        t.minutes-=60
        t.hours+=1

class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x = x
        self.y = y

    def distance_from_origin(self):
        """ Compute my distance from the origin """
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5
   
    def print_point(pt):
        print("({0}, {1})".format(pt.x, pt.y))
       
    def __str__(self):    # All we have done is renamed the method
        return "({0}, {1})".format(self.x, self.y)
            
    def halfway(self, target):
        """ Return the halfway point between myself and the target """
        mx = (self.x + target.x)/2
        my = (self.y + target.y)/2
        return Point(mx, my)

    def reflect_x(self):
        """ Reflect the point in the x axis"""
        return ((self.x, -(self.y)))

    def slope_from_origin(self):
        """ Finds the gradient of a line from the origin"""
        return (float(self.y/self.x))

    def __add__(self, other):
        return Point(self.x + other.x,  self.y + other.y)

    def __mul__(self, other):
        return self.x * other.x + self.y * other.y

    def __rmul__(self, other):
        return Point(other * self.x,  other * self.y)

    def multadd (x, y, z):
        return x * y + z

    def front_and_back(front):
        import copy
        back = copy.copy(front)
        back.reverse()
        print(str(front) + str(back))

    def reverse(self):
(self.x , self.y) = (self.y, self.x)
