#linked lists are made up of nodes
#nodes contain a pointer to another node in the list
#each node contains a unit of data called the cargo

#a linked list is either the empty list, represented by None,
#a node that contains a cargo object and a reference to a linked list

class Node:
    def __init__(self, cargo=None, next=None):
        self.cargo=cargo
        self.next=next

    def __str__(self):
        return str(self.cargo)


node1=Node(1)
node2=Node(2)
node3=Node(3)
node1.next=node2
node2.next=node3

def print_list(node):
    while node is not None:
        print(node, end="")
        node=node.next
    print()

print_list(node1)

def print_backward(list):
    if list is None: return
    head=list
    tail=list.next
    print_backward(tail)
    print(head,end="")

def remove_second(list):
    if list is None: return
    first=list
    second=list.next
    first.next=second.next
    second.next=None
    return second

def print_backward_nicely(list):
    print("[",end="")
    print_backward(list)
    print("]")

class LinkedList:
    def __init__(self):
        self.length=0
        self.head=None

    def add_first(self, cargo):
        node=Node(cargo)
        node.next=self.head
        self.head=node
        self.length+=1
        
    def print_backward(self):
        print("[",end="")
        if self.head is not None:
self.head.print_backward()
